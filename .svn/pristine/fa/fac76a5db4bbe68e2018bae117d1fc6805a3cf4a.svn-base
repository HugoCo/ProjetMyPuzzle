import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.awt.Color;

public class Fenetre extends Fenetres implements MouseListener, ActionListener  {
	
	
	String path="./Kaaris.jpg";
	ImageIcon image = new ImageIcon(path);
	int w = image.getIconWidth();
	int h = image.getIconHeight();
	Piece [][] p = DecoupeEasy(path);
	public JButton boutonIndice;
	
	public Fenetre(){
			
		
	
		
		/*Fenêtre */
		setTitle("Test");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(null);
		setBounds(0,0,1200,800);
		
		
		/* Panneaux*/
		boutonIndice= new JButton("Indices");
		boutonIndice.setBounds(1000,50,150,80);
		boutonIndice.addActionListener(this);
		
		Piece pan = new Piece(1);
		pan.setLayout(null);
		pan.setBounds(0,800-h,800,800);
		//pan.setBackground(fond);
		
		p[0][0].addMouseListener(this);
		AddTabJPanel(p,pan,w,h);
		
		/*Fin fenêtre*/
		
		add(pan);
		add(boutonIndice);
		setVisible(true);
		repaint();
		
		
		
		
		
}  
	public Piece [] [] DecoupeEasy (String path){ // Méthode renvoyant un tableau de JPanel contenant les images découpées
		int taille =3; //dimension du tableau de JPanel
		Piece [] [] p = new Piece[taille][taille]; // Impossible d'utiliser tableau car non dynamique --> pas intéressant car utilisation de 3 switch case avec tailles différentes tableau
		ImageIcon image = new ImageIcon(path);
		int w = image.getIconWidth();
		int h = image.getIconHeight();
			try {
		
				/* Initialisation des objets */
		
				BufferedImage bi = ImageIO.read(new File(path));
				ImageIcon [] [] img;
				JLabel [] [] lbl;
	
				/*Initialisation*/
			
				BufferedImage [][] bfi = new BufferedImage [taille][taille];
				img = new ImageIcon [taille][taille];
				lbl = new JLabel [taille][taille];
			
				for (int i=0;i<taille;i++){ 
					for(int j=0;j<taille;j++){
						p[i][j] = new Piece(taille*j+i); //initialisation de chq panneau du tbleau
						bfi[i][j]=ImageIO.read(new File(path)); // chaque bif lit le chemin pour accéder à l'image
					}
			}
			
			
				/*Traitement*/ 
			
				for (int m=0;m<taille;m++){
						for(int n=0;n<taille;n++){
							img[m][n]=new ImageIcon(bfi[n][m].getSubimage((n*w)/3,(h*m)/3,(w)/3,(h)/3)); 	
				}
			}
			
			/* Ajout de chaque élément traité dans les tableaux/LkdList */
			
				for (int i=0;i<taille;i++){
					for (int j=0;j<taille;j++){
						//~ p[i][j].setLayout(null);
						lbl[i][j]=new JLabel(img[i][j]);
						//~ lbl[i][j].setBounds((i*w)/3,((h)*j)/3,(w)/3,(h)/3);
						p[i][j].add(lbl[i][j]);
				}
			}
			
			
			
		
	} catch (IOException e){}
				return p;
} 
	public void AddTabJPanel (Piece [] [] p , Piece ret,int w,int h){
	//~ ret = new Piece();
	for (int i=0;i<p.length;i++){
		for (int j=0;j<p[i].length;j++){
			//~ p[i][j]=new Piece();
			p[j][i].setBounds((i*w)/3,((h-8)*j)/3,(w)/3,(h)/3);  
			ret.add(p[i][j]);		
			}
		}
	}
	public Piece[][] melangePuzzle(Piece[][] p, int taille){
	Piece [] [] tableauMelange = new Piece[taille][taille];	
	for(int i=0;i<taille;i++){
		for(int j=0;i<taille;j++){
			int irandom= (int) Math.random()*taille+1;
			int jrandom=(int) Math.random()*taille+1;
			while(p[irandom][jrandom]!=null){
				irandom= (int) Math.random()*taille+1;
				jrandom=(int) Math.random()*taille+1;
			}
			tableauMelange[i][j]=p[irandom][jrandom];
			p[irandom][jrandom]=null;
			}
		}
		return tableauMelange;
	}
		public void actionPerformed(ActionEvent e){
		if(e.getSource()==boutonIndice){
	        Fenetre_Indice fenindice = new Fenetre_Indice();
		    this.setVisible(false);
		    fenindice.setVisible (true);
		}
	}
		

		
	public void mouseEntered(MouseEvent e){
		if (e.getSource()==p[0][0]){
			p[0][0].setBackground(Color.BLACK);  
		}
		}
	public void mouseExited(MouseEvent e){}
	public void mousePressed(MouseEvent e){}
	public void mouseReleased(MouseEvent e){}
	public void mouseClicked(MouseEvent e){}
}
	
