import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.awt.Color;

public class Fenetre extends JFrame implements MouseListener  {
	
	
	String path="./Kaaris.jpg";
	ImageIcon image = new ImageIcon(path);
	int w = image.getIconWidth();
	int h = image.getIconHeight();
	JPanel [] [] p = DecoupeEasy(path);
	
	public Fenetre(){
			
		
	
		
		/*Fenêtre */
		setTitle("Test");
		setBounds(0,0,1000,1000);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
		
		
		/* Panneaux*/
		JPanel pan = new JPanel();
		pan.setLayout(null);
		pan.setBounds(0,0,800,800);
		
		p[0][0].addMouseListener(this);
		AddTabJPanel(p,pan,w,h);
		
		
		
		
		
		
		
		
		 // ajouter
		
		/*Fin fenêtre*/
		
		setContentPane(pan);
		setVisible(true);
		
		
		
		
		
}  
	public JPanel [] [] DecoupeEasy (String path){ // Méthode renvoyant un tableau de JPanel contenant les images découpées
		int taille =3; //dimension du tableau de JPanel
		JPanel [] [] p = new JPanel[taille][taille]; // Impossible d'utiliser tableau car non dynamique --> pas intéressant car utilisation de 3 switch case avec tailles différentes tableau
		ImageIcon image = new ImageIcon(path);
		int w = image.getIconWidth();
		int h = image.getIconHeight();
			try {
		
				/* Initialisation des objets */
		
				BufferedImage bi = ImageIO.read(new File(path));
				ImageIcon [] [] img;
				JLabel [] [] lbl;
	
				/*Initialisation*/
			
				BufferedImage [][] bfi = new BufferedImage [taille][taille];
				img = new ImageIcon [taille][taille];
				lbl = new JLabel [taille][taille];
			
				for (int i=0;i<taille;i++){ 
					for(int j=0;j<taille;j++){
						p[i][j] = new JPanel(); //initialisation de chq panneau du tbleau
						
						bfi[i][j]=ImageIO.read(new File(path)); // chaque bif lit le chemin pour accéder à l'image
					}
			}
			
			
				/*Traitement*/ 
			
				for (int m=0;m<taille;m++){
						for(int n=0;n<taille;n++){
							img[m][n]=new ImageIcon(bfi[n][m].getSubimage((n*w)/3,(h*m)/3,(w)/3,(h)/3)); 	
				}
			}
			
			/* Ajout de chaque élément traité dans les tableaux/LkdList */
			
				for (int i=0;i<taille;i++){
					for (int j=0;j<taille;j++){
						lbl[i][j]=new JLabel(img[i][j]);
						lbl[i][j].setBounds((i*w)/3,((h)*j)/3,(w)/3,(h)/3);
						p[i][j].add(lbl[i][j]);
				}
			}
			
			
			
		
	} catch (IOException e){}
				return p;
} 
	public void AddTabJPanel (JPanel [] [] p , JPanel ret,int w,int h){
	//~ ret = new JPanel();
	for (int i=0;i<p.length;i++){
				for (int j=0;j<p[i].length;j++){
					//~ p[i][j]=new JPanel();
					p[j][i].setBounds((i*w)/3,((h-8)*j)/3,(w)/3,(h)/3);  
					
					ret.add(p[i][j]);
					
				}
			}
}
	public void mouseEntered(MouseEvent e){
		}
	public void mouseExited(MouseEvent e){}
	public void mousePressed(MouseEvent e){}
	public void mouseReleased(MouseEvent e){}
	public void mouseClicked(MouseEvent e){}
}
	
